<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HOT BLOOD</title>
  
  <subtitle>Goals determine what you are going to be</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-11T14:05:53.244Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JiangGongQuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop伪分布式环境搭建(ubuntu14.04)</title>
    <link href="http://yoursite.com/2018/03/11/third-post-hadoop%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/03/11/third-post-hadoop搭建/</id>
    <published>2018-03-11T12:52:29.389Z</published>
    <updated>2018-03-11T14:05:53.244Z</updated>
    
    <content type="html"><![CDATA[<p>一、java环境搭建</p><p>参考博客：<a href="http://blog.csdn.net/best3c/article/details/72848540" target="_blank" rel="external">http://blog.csdn.net/best3c/article/details/72848540</a></p><p>1、安装JDK</p><p>1.1新建一个java文件夹名字叫java7u79<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /usr/java7u79</div></pre></td></tr></table></figure></p><p>1.2将linux版本的jdk安装包从宿主机复制进客人机(客户机)，一般直接可以拖进来，<br>然后拷贝·进/usr/java7u79目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp /home/jiang/桌面/jdk-7u79-linux-x64.tar.gz  /usr/java7u79</div></pre></td></tr></table></figure></p><p>1.3 进入/usr/java7u79目录解压jdk包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar xvf jdk-7u79-linux-x64.tar.gz</div></pre></td></tr></table></figure></p><p>1.4 进入配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.bashrc</div></pre></td></tr></table></figure></p><p><img src="/images/A.png" alt="&quot;图一&quot;"><br>1.5 配置完后，esc退出编辑模式，：wq保存退出环境配置</p><p>1.6检测java环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java –version</div></pre></td></tr></table></figure></p><p> <img src="/images/B.png" alt="&quot;图二&quot;"></p><p>二、    hadoop环境搭建</p><p>本教程使用 Ubuntu 14.04 64位 作为系统环境</p><ol><li>创建hadoop用户</li></ol><p>1.1 如果安装ubuntu时没有创建hadoop用户，此时就增加一个hadoop用户。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo useradd -m hadoop -s /bin/bash</div></pre></td></tr></table></figure></p><p>1.2 为hadoop用户设置密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo  passwd hadoop</div></pre></td></tr></table></figure></p><p>1.3 为hadoop用户添加管理员权限，方便部署，避免一些新手关于权限的麻烦<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo adduser hadoop sudo</div></pre></td></tr></table></figure></p><p>1.4 shut –h now 关机</p><p>2、安装SSH、配置SSH无密码登录<br>2.1 节点模式都需要用到 SSH 登陆（类似于远程登陆，你可以登录某台 Linux 主机，并且在上面运行命令），Ubuntu 默认已安装了 SSH client，此外还需要安装 SSH server<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssh-server</div></pre></td></tr></table></figure></p><p>2.2登录本机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh localhost</div></pre></td></tr></table></figure></p><p>此时会有如下提示(SSH首次登陆提示)，输入 yes 。然后按提示输入密码 hadoop，这样就登陆到本机了。<br>2.3登陆是需要每次输入密码的，我们需要配置成SSH无密码登陆比较方便。<br>首先退出刚才的 ssh，就回到了我们原先的终端窗口，然后利用 ssh-keygen 生成密钥，并将密钥加入到授权中：<br>exit # 退出刚才的 ssh localhost<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">su 到管理员权限  <span class="comment">#避免不必要的权限干扰</span></div><div class="line"><span class="built_in">cd</span> ~/.ssh/ <span class="comment"># 若没有该目录，请先执行一次ssh localhost</span></div><div class="line">ssh-keygen -t rsa              <span class="comment"># 会有提示，都按回车就可以cat ./id_rsa.pub &gt;&gt; ./authorized_keys  # 加入授权，如果提示没有该目录，重新exit一下，步骤重新做一遍</span></div></pre></td></tr></table></figure></p><p>2.4再次ssh localhost就可以不用密码登录</p><p>3、hadoop下载安装</p><p>Hadoop各版本：<a href="http://archive.apache.org/dist/hadoop/core/" target="_blank" rel="external">http://archive.apache.org/dist/hadoop/core/</a></p><p>3.1 解压hadoop.x.y.tar.gz</p><p>我这里解压到/usr下<br>tar –zxvf hadoop-2.6.0.tar.gz<br>解压到指定目录时，直接 tar –zxvf hadoop-2.6.0.tar.gz –C /usr </p><p> #可以试着修改文件名，我这里先不用修改了<br>mv ./hadoop-2.6.0 ./hadoop</p><p>3.2 切换到hadoop文件目录查看hadoop版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">./bin/Hadoop version</div><div class="line">``` </div><div class="line">![<span class="string">"图三"</span>](/images/C.png)</div><div class="line">4、hadoop伪分布式配置(配置文件一定仔细仔细)</div><div class="line">简介：Hadoop 可以在单节点上以伪分布式的方式运行，Hadoop 进程以分离的 Java 进程来运行，节点既作为 NameNode 也作为 DataNode，同时，读取的是 HDFS 中的文件。</div><div class="line">Hadoop 的配置文件位于 /usr/<span class="built_in">local</span>/hadoop/etc/hadoop/ 中，伪分布式需要修改2个配置文件 core-site.xml 和 hdfs-site.xml 。Hadoop的配置文件是 xml 格式，每个配置以声明 property 的 name 和 value 的方式来实现。</div><div class="line">4.1 修改配置文件 core-site.xml</div><div class="line"></div><div class="line">``` bash</div><div class="line">gedit ./etc/hadoop/core-site.xml(通过 gedit 编辑会比较方便，也可以使用vim等)</div><div class="line">``` </div><div class="line"></div><div class="line"> ![<span class="string">"图四"</span>](/images/D.png)</div><div class="line"> ![<span class="string">"图五"</span>](/images/E.png)</div><div class="line">4.2 Hadoop配置文件说明</div><div class="line">Hadoop 的运行方式是由配置文件决定的（运行 Hadoop 时会读取配置文件），因此如果需要从伪分布式模式切换回非分布式模式，需要删除 core-site.xml 中的配置项。</div><div class="line">此外，伪分布式虽然只需要配置 fs.defaultFS 和 dfs.replication 就可以运行（官方教程如此），不过若没有配置 hadoop.tmp.dir 参数，则默认使用的临时目录为 /tmp/hadoo-hadoop，而这个目录在重启时有可能被系统清理掉，导致必须重新执行 format 才行。所以我们进行了设置，同时也指定 dfs.namenode.name.dir 和 dfs.datanode.data.dir，否则在接下来的步骤中可能会出错。</div><div class="line">4.3 配置完成后，执行 NameNode 的格式化</div><div class="line"></div><div class="line">``` bash</div><div class="line">./bin/hdfs namenode -format</div></pre></td></tr></table></figure><p>成功的话，会看到 “successfully formatted” 和 “Exitting with status 0” 的提示，若为 “Exitting with status 1” 则是出错。<br> <img src="/images/F.png" alt="&quot;图六&quot;"></p><p>4.4开启NameNode和DataNode守护<br>./sbin/start-dfs.sh<br>这个步骤就算JAVA_HOME没有配置错误也可能会找不到JAVA路径<br>Hadoop安装完后，启动时报Error: JAVA_HOME is not set and could not be found.<br>解决办法：修改/etc/hadoop/hadoop-env.sh中设JAVA_HOME<br>路径改为绝对路径<br>Export JAVA_HOME=${JAVA_HOME}改为Export JAVA_HOME=/usr/java7u79/java1.7.0_79<br> <img src="/images/H.png" alt="&quot;图七&quot;"></p><p>启动完成后，可以通过命令 jps 来判断是否成功启动，若成功启动则会列出如下进程: “NameNode”、”DataNode” 和 “SecondaryNameNode”（如果 SecondaryNameNode 没有启动，请运行 sbin/stop-dfs.sh 关闭进程，然后再次尝试启动尝试）。如果没有 NameNode 或 DataNode ，那就是配置不成功，请仔细检查之前步骤，或通过查看启动日志排查原因。<br>4.5 成功启动<br>可以访问 Web 界面 <a href="http://localhost:50070" target="_blank" rel="external">http://localhost:50070</a> 查看 NameNode 和 Datanode 信息，还可以在线查看 HDFS 中的文件。<br>4.6打开或者关闭hadoop<br>切换到hadoop目录下<br>./sbin/stop-dfs.sh<br>./sbin/start-dfs.sh<br>5、YARN启动（伪分布式不启动 YARN 也可以，一般不会影响程序执行）<br>5.1 YARN简介<br>YARN 是从 MapReduce 中分离出来的，负责资源管理与任务调度。YARN 运行于 MapReduce 之上，提供了高可用性、高扩展性<br>通过 ./sbin/start-dfs.sh 启动 Hadoop，仅仅是启动了 MapReduce 环境，我们可以启动 YARN ，让 YARN 来负责资源管理与任务调度。</p><p>5.2 修改配置文件 mapred-site.xml，这边需要先进行重命名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv ./etc/hadoop/mapred-site.xml.template ./etc/hadoop/mapred-site.xml</div></pre></td></tr></table></figure></p><p>5.3 然后再进行编辑 vim ./etc/hadoop/mapred-site.xml<br> <img src="/images/H.png" alt="&quot;图八&quot;"><br>5.4修改配置文件 yarn-site.xml<br> <img src="/images/I.png" alt="&quot;图九&quot;"><br>5.5启动YARN(启动之前先启动hadoop)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./sbin/start-yarn.sh      <span class="comment"># 启动YARN</span></div><div class="line">./sbin/mr-jobhistory-daemon.sh start historyserver  <span class="comment"># 开启历史服务器，才能在Web中查看任务运行情况</span></div></pre></td></tr></table></figure></p><p>5.6  ps查看，可以看到多了 NodeManager 和 ResourceManager 两个后台进程，如下图所示。<br> <img src="/images/J.png" alt="&quot;图十&quot;"><br>5.7 YARN启动和关闭（单机若无需要不建议开启YARN,使用反而会使程序变慢）<br>![“图十一”](/images/K.png<br>./sbin/mr-jobhistory-daemon.sh stop historyserver<br>stopping historyserver<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、java环境搭建&lt;/p&gt;
&lt;p&gt;参考博客：&lt;a href=&quot;http://blog.csdn.net/best3c/article/details/72848540&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java基础归纳</title>
    <link href="http://yoursite.com/2017/11/28/second-post-Java/"/>
    <id>http://yoursite.com/2017/11/28/second-post-Java/</id>
    <published>2017-11-28T02:11:04.717Z</published>
    <updated>2017-11-28T03:22:17.530Z</updated>
    
    <content type="html"><![CDATA[<p>博客初心:</p><p>此次归纳大多结合java核心技术卷一，总结知识要点，最主要的是通过博客的方式让自己知识记得更加牢固。</p><p>一. 基础篇</p><p>1.编译方式</p><p>1.1 DOS编译：</p><p>(1)在某文件中创建记事本<br>(2)打开记事本编写java代码，使用 类.java 作为文件名保存<br>(3)进入DOS,切换路径到文件路径<br>(4)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">javac 类.java</div><div class="line">java 类</div></pre></td></tr></table></figure></p><p>1.2 eclipse和idea编译</p><p>现在最主流的java编译工具：eclipse和idea，前者适用范围广，后者方便功能强大，各有优点</p><p>常用eclipse快捷键：<br>(1)alt + / :自动提示代码<br>(2)ctrl + o:查询特定的类和方法<br>(3)ctrl + shift + r ：打开工作空间所有的.java文件，输入对应的回车进入<br>(4)ctrl + e ：打开正在编辑栏的 .java文件<br>(5)ctrl + pageup/pagedown ： java编辑栏.java文件之间的切换<br>(6)ctrl + d ： 删除当前行<br>(7)ctrl + shift + enter : 保持光标不变，在当前行下创建空白行<br>(8)alt + 上下方向键 : 移动选中代码块，默认光标一行<br>(9)ctrl + m ：当前编辑页面最大化，最小化之间的切换<br>(10)ctrl + / :注释一行或多行代码<br>(11)ctrl + shift + /：注释多行代码/<em> </em>/方式<br>+\  ：取消注释<br>(12)ctrl + shift + x | Y :英文字母大小写转化<br>(13)ctrl  + shift + o : 导入代码中需要的包<br>(14)ctrl + shift + f: 格式化当前代码</p><p>2.字符，字符串</p><p>java字符串就是unicode字符序列</p><p>2.1 子串的提取（SubString）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">字符串.SubString(下标1，下标2);</div><div class="line"><span class="comment">#下标1代表从哪开始提取，下标2代表不提取的第一个位置</span></div></pre></td></tr></table></figure></p><p>例如:<br>String a = “hello”;<br>b = a.SubString(0,3);</p><p>#b输出hel,属于下标0，1，2</p><p>2.2 字符串拼接（join）</p><p>注 ： 字符串与字符串拼接用”+”;与非字符串自动拼接，此时非字符串自动转化为字符串<br>特地的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#自定义拼接方式</span></div><div class="line">String all = String.join(<span class="string">"/"</span>,<span class="string">"s"</span>,<span class="string">"M"</span>,<span class="string">"L"</span>);</div><div class="line"><span class="comment">#"/"可以自己定义拼接方式，此时all输出s/M/L</span></div></pre></td></tr></table></figure></p><p>2.3 字符串是否相等（euqals()）</p><p>默认的equals()方法区分大小写，使用equalsIgnoreCase()不区分<br>注：equals()区别于”==”，equals()只是比较数值，而”==”比较引用对象的位置和数值</p><p>2.4 空串和null串</p><p>空串是java对象，串长度为0内容为空，例如：String a = “”;<br>null串，表示没有任何对象与该变量关联，常常做为对象初始化，例如： String b = null;</p><p>2.5 构建字符串(StringBuilder)</p><p>#建立一个空构造器<br>StringBuilder a = new StringBuilder();</p><p>#添加内容<br>a.append();</p><p>#构建字符串,b为新的字符串<br>String b = a.toString();</p><p>2.6 输入与输出</p><p>import引入java包的原因：使用的类不是定义在基本java.lang包</p><p>Dos中完成密码不可见输入（eclipse中不适用,会报错）：<br>Console cons = System.console();<br>String Username = cons.readLine();<br>char[] Passwd = cons.readPassword();</p><p>#为了安全起见，返回的密码存放在一维数组中</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博客初心:&lt;/p&gt;
&lt;p&gt;此次归纳大多结合java核心技术卷一，总结知识要点，最主要的是通过博客的方式让自己知识记得更加牢固。&lt;/p&gt;
&lt;p&gt;一. 基础篇&lt;/p&gt;
&lt;p&gt;1.编译方式&lt;/p&gt;
&lt;p&gt;1.1 DOS编译：&lt;/p&gt;
&lt;p&gt;(1)在某文件中创建记事本&lt;br&gt;(2)
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo+github搭建博客</title>
    <link href="http://yoursite.com/2017/11/08/first-post/"/>
    <id>http://yoursite.com/2017/11/08/first-post/</id>
    <published>2017-11-08T01:37:41.142Z</published>
    <updated>2018-03-11T14:03:49.391Z</updated>
    
    <content type="html"><![CDATA[<p>一. 准备相关工具 </p><p>1.注册一个github账号 (用户名关系到仓库名和网址)；<br><a href="https://github.com" target="_blank" rel="external">github注册</a><br>2.安装node.js；<br>3.安装git(git终端执行命令行方便快捷)；</p><p>二. 创建github仓库</p><p>仓库格式为 （用户名.github.io）,比如说你的用户名为：zhangsan,那么仓库名为：zhangsan.github.io,将来的网站地址： <a href="https://zhangsan.github.io" target="_blank" rel="external">https://zhangsan.github.io</a> ，刚刚创建的仓库有默认的实例页面，以后你的网站所有代码都是放在这个库仓里了。</p><p>注:<br>A. 注册的邮箱一定要验证，否则不会成功；<br>B. 仓库创建成功不会立即生效，需要过一段时间；<br>C. 每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p><p>三. 绑定域名</p><p>  域名绑定增加博客格调，可以现在绑定，也可以搭建好博客后绑定，或者使用默认的（用户名.github.io）访问是一样的。绑定域名国内的阿里云挺不错了，价格也不贵第一年基本便宜，续费贵点，如果博客使用很长时间，那么多买几年划算。这块我就不多说了，详细参考域名绑定吧。</p><p>  这篇域名绑定不错：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">  网址：http://www.jianshu.com/p/cea41e5c9b2a?open_source=weibo_search</div><div class="line">   注：现在的域名要实名认证，通过大概要两周时间。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">四. 配置SSH KEY</div><div class="line"></div><div class="line">配置SSH密钥，原因在于提交代码肯定要拥有github权限才行，直接使用用户名和密码不安全，因此我们使用SSH KEY来解决本地和服务器的连接问题。</div><div class="line"></div><div class="line">温馨提示: 所有命令操作都是在git终端（安装了git，鼠标右键，git bash here）进行，切换到hexo目录下</div><div class="line"></div><div class="line"></div><div class="line">``` bash</div><div class="line">$ <span class="built_in">cd</span> ~/. ssh   <span class="comment">#检查本机已存在的ssh密钥</span></div><div class="line">提示：No such file or directory 说明你是第一次使用git。</div><div class="line"></div><div class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址"</span></div><div class="line"></div><div class="line">然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，</div><div class="line">记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</div><div class="line"></div><div class="line">将刚复制的内容粘贴到key那里，title随便填，保存。</div><div class="line"></div><div class="line">在git终端测试：</div><div class="line"></div><div class="line">$ ssh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></div><div class="line"></div><div class="line">提示: Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)?，输入yes。</div><div class="line"></div><div class="line">SSH KEY配置成功会看到：</div><div class="line"></div><div class="line">    Hi zhangsan! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">继续在终端输入:</span></div><div class="line"><span class="string">$ git config --global user.name "zhangsan"// 你的github用户名，非昵称</span></div><div class="line"><span class="string">$ git config --global user.email  "xxx@qq.com"// 填写你的github注册邮箱</span></div><div class="line"><span class="string">配置完成。</span></div></pre></td></tr></table></figure></p><p>五. 配置与使用hexo<br>到这了，说明你已经翻越了很多高山和跳过隐藏大坑了，继续加油吧！点击ReadMore</p><a id="more"></a> <ol><li>hexo简介              </li></ol><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。<br>——<a href="http://hexo.io" target="_blank" rel="external">进入hexo官网了解更多</a><br>——<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">进入github查看hexo</a></p><ol><li>hexo作用</li></ol><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关 链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的 页面提交到github。</p><ol><li>安装hexo3.x(gir终端命令行)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure><ol><li>初始化<br>新建文件夹HexoDemo(比如D:\weblog\HexoDemo)用于存放页面代码。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /f/Workspaces/hexo/</div><div class="line">$ hexo init</div></pre></td></tr></table></figure><p>hexo会自动下载一些文件到这个目录，包括node_modules文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g <span class="comment"># 生成</span></div><div class="line">$ hexo s <span class="comment"># 启动服务，开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容</span></div></pre></td></tr></table></figure><p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github</p><p>接下来看看你搭建的博客框架吧！第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，主题样子不怎么好看是吧？</p><p>4.6 修改主题</p><p><a href="https://hexo.io/themes" target="_blank" rel="external">官方主题</a><br>这里使用一个hexo-theme-yilia主题讲解:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /d/weblog/HexoDemo  <span class="comment">#进入hexo根目录</span></div><div class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia <span class="comment">#x下载主题</span></div><div class="line">``` </div><div class="line">下载后的主题在/d/weblog/HexoDemo/themes下yilia</div><div class="line"></div><div class="line">修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g和hexo d来重新生成和发布。</div><div class="line">如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。</div><div class="line"></div><div class="line"></div><div class="line">4.7 上传习惯养成</div><div class="line"></div><div class="line">在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</div><div class="line"></div><div class="line">4.8 上传到github</div><div class="line"></div><div class="line">注: 修改配置时，冒号后面空一格，不然配置不会生效，本人踩过的大坑</div><div class="line"></div><div class="line">配置_config.yml中有关deploy的部分:</div><div class="line">``` bash</div><div class="line">deploy:</div><div class="line"> <span class="built_in">type</span>: git</div><div class="line"> repository: git@github.com:username/username.io.git   (注意更换user)</div><div class="line"> branch: master</div></pre></td></tr></table></figure><p>安装一个插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git</div></pre></td></tr></table></figure><p>接着输入hexo d将本次代码改动提交，以后每次改动后，先hexo s，到本地预览效果，再hexo d提交到github服务器，更好的实现自己需要的效果。</p><p>注意：通过本文的发表，经常会遇到修改配置后没效果的现象，确定配置没错，那么试试hexo clean 清理public文件</p><p>六. hexo常用命令<br>hexo new “postName” #新建文章，生成的md文件位于hexo目录下source_posts</p><p>hexo new page “pageName” #新建页面,标签形式存在</p><p>hexo generate = hexo g #生成静态页面至public目录</p><p>hexo server  = hexo s  #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p><p>hexo deploy  = hexo d  #部署到GitHub</p><p>hexo help  # 查看帮助</p><p>hexo version  #查看Hexo的版本</p><p>组合命令:<br>hexo s -g    #生成并本地预览<br>hexo d -g    #生成并上传</p><p>七. 写博客<br>到我们的hexo根目录，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">'my-first-blog'</span>   <span class="comment">#hexo会在_posts下生成相关md文件：</span></div></pre></td></tr></table></figure><p>打开md文件就可以开始写博客,这里就是博客正文<br>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p><p>八. 博客效果</p><p>访问我的git博客来查看效果： <a href="https://jiangsir12356.github.io/" target="_blank" rel="external">https://jiangsir12356.github.io/</a></p><p>哈哈！这是我的第一篇博客还没买域名，不过用来记录个人学习足够。</p><p><img src="/images/first.jpg" alt="&quot;奔跑心情&quot;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一. 准备相关工具 &lt;/p&gt;
&lt;p&gt;1.注册一个github账号 (用户名关系到仓库名和网址)；&lt;br&gt;&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github注册&lt;/a&gt;&lt;br&gt;2.安装node.js；&lt;br&gt;3.安装git(git终端执行命令行方便快捷)；&lt;/p&gt;
&lt;p&gt;二. 创建github仓库&lt;/p&gt;
&lt;p&gt;仓库格式为 （用户名.github.io）,比如说你的用户名为：zhangsan,那么仓库名为：zhangsan.github.io,将来的网站地址： &lt;a href=&quot;https://zhangsan.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://zhangsan.github.io&lt;/a&gt; ，刚刚创建的仓库有默认的实例页面，以后你的网站所有代码都是放在这个库仓里了。&lt;/p&gt;
&lt;p&gt;注:&lt;br&gt;A. 注册的邮箱一定要验证，否则不会成功；&lt;br&gt;B. 仓库创建成功不会立即生效，需要过一段时间；&lt;br&gt;C. 每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。&lt;/p&gt;
&lt;p&gt;三. 绑定域名&lt;/p&gt;
&lt;p&gt;  域名绑定增加博客格调，可以现在绑定，也可以搭建好博客后绑定，或者使用默认的（用户名.github.io）访问是一样的。绑定域名国内的阿里云挺不错了，价格也不贵第一年基本便宜，续费贵点，如果博客使用很长时间，那么多买几年划算。这块我就不多说了，详细参考域名绑定吧。&lt;/p&gt;
&lt;p&gt;  这篇域名绑定不错：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  网址：http://www.jianshu.com/p/cea41e5c9b2a?open_source=weibo_search&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   注：现在的域名要实名认证，通过大概要两周时间。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;四. 配置SSH KEY&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;配置SSH密钥，原因在于提交代码肯定要拥有github权限才行，直接使用用户名和密码不安全，因此我们使用SSH KEY来解决本地和服务器的连接问题。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;温馨提示: 所有命令操作都是在git终端（安装了git，鼠标右键，git bash here）进行，切换到hexo目录下&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;``` bash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/. ssh   &lt;span class=&quot;comment&quot;&gt;#检查本机已存在的ssh密钥&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;提示：No such file or directory 说明你是第一次使用git。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ssh-keygen -t rsa -C &lt;span class=&quot;string&quot;&gt;&quot;邮件地址&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&amp;gt; SSH and GPG keys -&amp;gt; New SSH key：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;将刚复制的内容粘贴到key那里，title随便填，保存。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;在git终端测试：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ ssh -T git@github.com &lt;span class=&quot;comment&quot;&gt;# 注意邮箱地址不用改&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;提示: Are you sure you want to &lt;span class=&quot;built_in&quot;&gt;continue&lt;/span&gt; connecting (yes/no)?，输入yes。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SSH KEY配置成功会看到：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Hi zhangsan! You&lt;span class=&quot;string&quot;&gt;&#39;ve successfully authenticated, but GitHub does not provide shell access.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;继续在终端输入:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;$ git config --global user.name &quot;zhangsan&quot;// 你的github用户名，非昵称&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;配置完成。&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;五. 配置与使用hexo&lt;br&gt;到这了，说明你已经翻越了很多高山和跳过隐藏大坑了，继续加油吧！点击ReadMore&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
